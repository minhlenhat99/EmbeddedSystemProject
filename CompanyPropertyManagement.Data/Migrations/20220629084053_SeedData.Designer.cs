// <auto-generated />
using System;
using CompanyPropertyManagement.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyPropertyManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220629084053_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("561de9a3-70d5-42d2-971c-0e19ad1ad677"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d1f7836-d2eb-4d33-bbd7-33e65b8abe2a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Employee1"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.BU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BUs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            Name = "Unit 1"
                        },
                        new
                        {
                            Id = new Guid("29d9185f-9ca8-4f15-a86d-f11adbf0f36b"),
                            Name = "Unit 2"
                        },
                        new
                        {
                            Id = new Guid("fb92c360-448c-4e52-9080-85d7a59bfc92"),
                            Name = "Unit 3"
                        },
                        new
                        {
                            Id = new Guid("35cbe220-d0dc-4258-933a-f0b4d7fc4b67"),
                            Name = "Unit 4"
                        },
                        new
                        {
                            Id = new Guid("2b1e8d1a-50b6-40a8-8d58-9fc464b416e2"),
                            Name = "Unit 5"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcc8fd90-c064-46a2-9b41-c0db1180c15d"),
                            Name = "Screen"
                        },
                        new
                        {
                            Id = new Guid("16dabedd-5252-4e8e-a149-3dd409b5f698"),
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = new Guid("658e17b9-871c-4a18-b29a-ab6d9aa4cb00"),
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = new Guid("b2174ae3-d9e9-4f44-934e-2b43ca071710"),
                            Name = "Chair"
                        },
                        new
                        {
                            Id = new Guid("99f0bb8e-5b87-4b01-9a8f-fdd5f4f73a39"),
                            Name = "Table"
                        });
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuId");

                    b.HasIndex("UserId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99e948ca-1897-4973-bf44-4dac4b4da6d8"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("bcc8fd90-c064-46a2-9b41-c0db1180c15d")
                        },
                        new
                        {
                            Id = new Guid("ab610c59-5c76-4031-9130-9648f40f144e"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("bcc8fd90-c064-46a2-9b41-c0db1180c15d")
                        },
                        new
                        {
                            Id = new Guid("93de01c0-ce54-4447-9b9f-a84caaf1485c"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("bcc8fd90-c064-46a2-9b41-c0db1180c15d")
                        },
                        new
                        {
                            Id = new Guid("739c6511-9b77-445b-b38f-a90d90c4e2aa"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("bcc8fd90-c064-46a2-9b41-c0db1180c15d")
                        },
                        new
                        {
                            Id = new Guid("3f5a1732-9730-4aa6-a014-9f3d4953f791"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("bcc8fd90-c064-46a2-9b41-c0db1180c15d")
                        },
                        new
                        {
                            Id = new Guid("fcfab7a5-338f-4bae-8697-74c0f1e452b4"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("16dabedd-5252-4e8e-a149-3dd409b5f698")
                        },
                        new
                        {
                            Id = new Guid("0bc697e0-ad88-4b8b-811b-36820b427e1c"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("16dabedd-5252-4e8e-a149-3dd409b5f698")
                        },
                        new
                        {
                            Id = new Guid("6c815a3e-f13f-4577-9aa0-4a1166762fc8"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("16dabedd-5252-4e8e-a149-3dd409b5f698")
                        },
                        new
                        {
                            Id = new Guid("827d08f2-99e7-4410-9c28-82609447beba"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("16dabedd-5252-4e8e-a149-3dd409b5f698")
                        },
                        new
                        {
                            Id = new Guid("cfccc6ea-2888-47cd-bb85-00f02bb7a6b0"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("16dabedd-5252-4e8e-a149-3dd409b5f698")
                        },
                        new
                        {
                            Id = new Guid("0583e4db-4a25-4b16-b483-d572f5d740b4"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("658e17b9-871c-4a18-b29a-ab6d9aa4cb00")
                        },
                        new
                        {
                            Id = new Guid("898b9ef9-172c-49c2-b9e4-6fa0d42dadd3"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("658e17b9-871c-4a18-b29a-ab6d9aa4cb00")
                        },
                        new
                        {
                            Id = new Guid("901e14e8-ca46-49c8-8a14-641a0c869145"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("658e17b9-871c-4a18-b29a-ab6d9aa4cb00")
                        },
                        new
                        {
                            Id = new Guid("6ee9c83f-3452-4500-8e5c-ced1ae39ede8"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("658e17b9-871c-4a18-b29a-ab6d9aa4cb00")
                        },
                        new
                        {
                            Id = new Guid("0412cedb-b55e-42a4-bee2-aa73d65c91d0"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("658e17b9-871c-4a18-b29a-ab6d9aa4cb00")
                        },
                        new
                        {
                            Id = new Guid("dec405eb-d8c1-439e-86b2-b63976c41458"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("b2174ae3-d9e9-4f44-934e-2b43ca071710")
                        },
                        new
                        {
                            Id = new Guid("b41a1297-c7f8-4c1f-887f-2f6ee5813930"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("b2174ae3-d9e9-4f44-934e-2b43ca071710")
                        },
                        new
                        {
                            Id = new Guid("656b7c0a-23b3-411e-96d0-85021b35c828"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("b2174ae3-d9e9-4f44-934e-2b43ca071710")
                        },
                        new
                        {
                            Id = new Guid("e540f085-a188-436a-8af9-54c049ae22ab"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("b2174ae3-d9e9-4f44-934e-2b43ca071710")
                        },
                        new
                        {
                            Id = new Guid("02749fad-aa90-4a87-a4b1-2f2f46dd3851"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("b2174ae3-d9e9-4f44-934e-2b43ca071710")
                        },
                        new
                        {
                            Id = new Guid("c7378e56-7659-4d3e-a5ee-d352e26965c0"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("99f0bb8e-5b87-4b01-9a8f-fdd5f4f73a39")
                        },
                        new
                        {
                            Id = new Guid("5eaf5103-f90b-43e4-878d-d9663d107b89"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("99f0bb8e-5b87-4b01-9a8f-fdd5f4f73a39")
                        },
                        new
                        {
                            Id = new Guid("88ba0577-b66d-4d8a-ac8b-530b8b2e050c"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("99f0bb8e-5b87-4b01-9a8f-fdd5f4f73a39")
                        },
                        new
                        {
                            Id = new Guid("def95b2e-2a0e-4e12-8205-585114fc108e"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("99f0bb8e-5b87-4b01-9a8f-fdd5f4f73a39")
                        },
                        new
                        {
                            Id = new Guid("62e057da-9c6d-4795-a883-913c0979d218"),
                            BuId = new Guid("9c15bf3f-72d1-4ddc-8f23-e366e459399c"),
                            CategoryId = new Guid("99f0bb8e-5b87-4b01-9a8f-fdd5f4f73a39")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Inventory", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.BU", "BU")
                        .WithMany("Inventories")
                        .HasForeignKey("BuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BU");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Property", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.BU", "BU")
                        .WithMany("Properties")
                        .HasForeignKey("BuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPropertyManagement.Data.Domain.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BU");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CompanyPropertyManagement.Data.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.AppUser", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.BU", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CompanyPropertyManagement.Data.Domain.Category", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
